/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DataLayrDisclosureLogic,
  DataLayrDisclosureLogicInterface,
} from "../../../../contracts/libraries/eigenda/DataLayrDisclosureLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "header",
        type: "bytes",
      },
    ],
    name: "getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "c",
            type: "tuple",
          },
          {
            internalType: "uint48",
            name: "degree",
            type: "uint48",
          },
          {
            internalType: "uint32",
            name: "numSys",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "numPar",
            type: "uint32",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.DataStoreKZGMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "i",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numSys",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numPar",
        type: "uint32",
      },
    ],
    name: "getLeadingCosetIndexFromHighestRootOfUnity",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "degree",
        type: "uint256",
      },
    ],
    name: "getZeroPolyMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    name: "linearPolynomialEvaluation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "nextPowerOf2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "header",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "chunkNumber",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "interpolationPoly",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "revealProof",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct BN254.G2Point",
            name: "zeroPoly",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "zeroPolyProof",
            type: "bytes",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.MultiRevealProof",
        name: "multiRevealProof",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "nonInteractivePolynomialProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "c",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "pi",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "s",
        type: "uint256",
      },
    ],
    name: "openPolynomialAtPoint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "value",
        type: "uint32",
      },
    ],
    name: "reverseBits",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "length",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "value",
        type: "uint32",
      },
    ],
    name: "reverseBitsLimited",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct BN254.G1Point",
            name: "c",
            type: "tuple",
          },
          {
            internalType: "uint48",
            name: "degree",
            type: "uint48",
          },
          {
            internalType: "uint32",
            name: "numSys",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "numPar",
            type: "uint32",
          },
        ],
        internalType: "struct DataLayrDisclosureLogic.DataStoreKZGMetadata",
        name: "dskzgMetadata",
        type: "tuple",
      },
      {
        internalType: "uint32",
        name: "chunkNumber",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "interpolationPoly",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "revealProof",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "zeroPoly",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "zeroPolyProof",
        type: "bytes",
      },
    ],
    name: "validateDisclosureResponse",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "polys",
        type: "bytes[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point[]",
        name: "interpolationPolys",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "verifyBatchPolyEquivalenceProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "poly",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "X",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Y",
            type: "uint256",
          },
        ],
        internalType: "struct BN254.G1Point",
        name: "interpolationPoly",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "X",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2]",
            name: "Y",
            type: "uint256[2]",
          },
        ],
        internalType: "struct BN254.G2Point",
        name: "polyEquivalenceProof",
        type: "tuple",
      },
    ],
    name: "verifyPolyEquivalenceProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61227961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80635729f2ce1161007b5780635729f2ce146101b957806399ae87ee146101cc578063b3902827146101df578063bd73d385146101f2578063c9f698e714610205578063ddeacaf61461021857600080fd5b80630e425d17146100c357806329cc94b8146100e95780632a6fa693146101115780632a797870146101245780632b2c99df14610183578063413a94ee146101a6575b600080fd5b6100d66100d13660046117dd565b61022b565b6040519081526020015b60405180910390f35b6100fc6100f736600461180a565b610258565b60405163ffffffff90911681526020016100e0565b6100d661011f3660046117dd565b610299565b610137610132366004611885565b610597565b604080518251805182526020908101518183015283015165ffffffffffff16818301529082015163ffffffff90811660608084019190915290920151909116608082015260a0016100e0565b6101966101913660046118f0565b61061a565b60405190151581526020016100e0565b6101966101b436600461199a565b6106bf565b6101966101c7366004611ad9565b6109cc565b6100d66101da366004611b1e565b610b4c565b6100fc6101ed366004611b69565b610bd0565b610196610200366004611b84565b610c1e565b6100fc610213366004611c43565b610ddc565b610196610226366004611d35565b610f38565b600060015b82816001901b101561024e578061024681611e43565b915050610230565b6001901b92915050565b60008061026a8463ffffffff16611140565b610275906020611e5e565b90508063ffffffff1661028784610bd0565b63ffffffff16901c9150505b92915050565b6000806102a583611140565b9050806102d457507fe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f192915050565b806001141561030557507f4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f6792915050565b806002141561033657507f092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab92915050565b806003141561036757507f494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b0775592915050565b806004141561039857507ffdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d2292915050565b80600514156103c957507f3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d492915050565b80600614156103fa57507fbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb0431092915050565b806007141561042b57507ff0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec92915050565b806008141561045c57507f038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f692915050565b806009141561048d57507f2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd0192915050565b80600a14156104be57507f1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc92915050565b80600b14156104ef57507f60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc820192915050565b80600c141561052057507feda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc92915050565b80600d141561055157507f8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce892915050565b60405162461bcd60e51b81526020600482015260166024820152754c6f67206e6f7420696e2076616c69642072616e676560501b60448201526064015b60405180910390fd5b6040805160c08101825260006080820181815260a0830182905282526020820181905291810182905260608101919091525050604080518082018252823581526020838101358183015282516080810184529182528383013560e090811c918301919091526044840135811c92820192909252604890920135901c606082015290565b600080600080516020612224833981519152868660405161063c929190611e83565b6040805191829003822060208084019190915287359183019190915286013560608201526080016040516020818303038152906040528051906020012060001c6106869190611ea9565b90506000610695878784610b4c565b905060006106b36106ab36889003880188611ebd565b8685856109cc565b98975050505050505050565b600080856001600160401b038111156106da576106da611a49565b604051908082528060200260200182016040528015610703578160200160208202803683370190505b50905060005b868110156107eb5787878281811061072357610723611ed9565b90506020028101906107359190611eef565b604051610743929190611e83565b604051809103902086868381811061075d5761075d611ed9565b9050604002016000013587878481811061077957610779611ed9565b905060400201602001356040516020016107a6939291909283526020830191909152604082015260600190565b604051602081830303815290604052805190602001208282815181106107ce576107ce611ed9565b6020908102919091010152806107e381611e43565b915050610709565b5060006000805160206122248339815191528260405160200161080e9190611f68565b6040516020818303038152906040528051906020012060001c6108319190611ea9565b905061083b611746565b60008051602061222483398151915283600060405160200161085e929190611f74565b6040516020818303038152906040528051906020012060001c6108819190611ea9565b808252602082015260008787828161089b5761089b611ed9565b9050604002018036038101906108b19190611ebd565b905060006108e38b8b60008181106108cb576108cb611ed9565b90506020028101906108dd9190611eef565b86610b4c565b905060015b888110156109b05761092e836109298c8c8581811061090957610909611ed9565b90506040020180360381019061091f9190611ebd565b60208801516111a6565b61122f565b9250600061095f8d8d8481811061094757610947611ed9565b90506020028101906109599190611eef565b88610b4c565b905060008051602061222483398151915280828760016020020151098408602086015186519194506000805160206122248339815191529109602086015250806109a881611e43565b9150506108e8565b506109bd828886846109cc565b9b9a5050505050505050505050565b604080518082019091526001815260026020820152600090816109f76109f1836112be565b866111a6565b604080518082019091527f220ac48bb1f91fd93f502a3d0caa077ac70e0af8819b9d8fa26a168a2c558a5781527f08f54b82af08ceaf7cd5f180bac94870f6d8100a9c9afa9dd09a4491653891126020820152909150610a57818361122f565b91506000610a6d610a67856112be565b876111a6565b90506000610a7b8a8361122f565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020838101919091528101919091529091506109bd85610b45368d90038d018d611f8d565b848461137d565b600080836001825b82811015610bc2576000888289610b6c826020611fa9565b92610b7993929190611fc1565b610b8291611feb565b905060008051602061222483398151915280848309860894506000805160206122248339815191528784099250610bba602083611fa9565b915050610b54565b5091925050505b9392505050565b600080805b6020811015610c17576001811b84811663ffffffff1615610c0457610bfb82601f612009565b6001901b831792505b5080610c0f81611e43565b915050610bd5565b5092915050565b600080610c2b8989610597565b9050610c5781888660408101610c4936839003830160808401611f8d565b6102266101008b018b611eef565b610cae5760405162461bcd60e51b815260206004820152602260248201527f52657665616c206661696c65642064756520746f206e6f6e20312070616972696044820152616e6760f01b606482015260840161058e565b60208101518590610cc0906001612020565b610ccb90602061204a565b65ffffffffffff1614610d465760405162461bcd60e51b815260206004820152603860248201527f506f6c796e6f6d69616c206d757374206861766520612032353620626974206360448201527f6f656666696369656e7420666f722065616368207465726d0000000000000000606482015260840161058e565b60006000805160206122248339815191528787604051610d67929190611e83565b6040805191829003822060208084019190915288359183019190915287013560608201526080016040516020818303038152906040528051906020012060001c610db19190611ea9565b90506000610dc0888884610b4c565b90506109bd610dd436889003880188611ebd565b8684846109cc565b600080610de98385612078565b90506000610dfc8563ffffffff1661022b565b90506000610e0a8684612097565b63ffffffff1615610e1c576001610e1f565b60005b60ff16610e2c87856120ba565b610e369190612078565b90506000610e52610e4783856120dd565b63ffffffff1661022b565b90508663ffffffff168863ffffffff161015610e945780610e73828a610258565b610e7f906101006120dd565b610e8991906120ba565b945050505050610bc9565b610e9e8784611e5e565b610ea89082611e5e565b63ffffffff168863ffffffff161015610ed55780610e738185610ecb8b8d611e5e565b6100f79190612078565b60405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420637265617465206e756d626572206f66206672616d6520686960448201527167686572207468616e20706f737369626c6560701b606482015260840161058e565b825160208082015191518186015180830151905160408051948501959095529383019190915260608201526080810191909152600090610ff59060a00160405160208183030381529060405280519060200120610f9e898b604001518c60600151610ddc565b63ffffffff16610fb98b6020015165ffffffffffff16610299565b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115e192505050565b6110415760405162461bcd60e51b815260206004820181905260248201527f496e636f7272656374207a65726f20706f6c79206d65726b6c652070726f6f66604482015260640161058e565b87516000906110619061092961105c368b90038b018b611ebd565b6112be565b604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290915061113261112a36899003890189611ebd565b87848461137d565b9a9950505050505050505050565b60008082116111875760405162461bcd60e51b8152602060048201526013602482015272131bd9c81b5d5cdd081899481919599a5b9959606a1b604482015260640161058e565b60005b600183821c14610293578061119e81611e43565b91505061118a565b60408051808201909152600080825260208201526111c2611764565b83518152602080850151908201526040808201849052600090836060846007600019fa9050806112275760405162461bcd60e51b815260206004820152601060248201526f189b8c8d4d0b5b5d5b0b59985a5b195960821b604482015260640161058e565b505092915050565b604080518082019091526000808252602082015261124b611782565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050806112275760405162461bcd60e51b815260206004820152601060248201526f189b8c8d4d0b5859190b59985a5b195960821b604482015260640161058e565b604080518082019091526000808252602082015281511580156112e357506020820151155b15611301575050604080518082019091526000808252602082015290565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784602001516113469190611ea9565b611370907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612009565b905292915050565b919050565b6040805180820182528581526020808201859052825180840190935285835282018390526000916113ac6117a0565b60005b60028110156115715760006113c5826006612100565b90508482600281106113d9576113d9611ed9565b602002015151836113eb836000611fa9565b600c81106113fb576113fb611ed9565b602002015284826002811061141257611412611ed9565b602002015160200151838260016114299190611fa9565b600c811061143957611439611ed9565b602002015283826002811061145057611450611ed9565b6020020151515183611463836002611fa9565b600c811061147357611473611ed9565b602002015283826002811061148a5761148a611ed9565b60200201515160016020020151836114a3836003611fa9565b600c81106114b3576114b3611ed9565b60200201528382600281106114ca576114ca611ed9565b6020020151602001516000600281106114e5576114e5611ed9565b6020020151836114f6836004611fa9565b600c811061150657611506611ed9565b602002015283826002811061151d5761151d611ed9565b60200201516020015160016002811061153857611538611ed9565b602002015183611549836005611fa9565b600c811061155957611559611ed9565b6020020152508061156981611e43565b9150506113af565b5061157a6117bf565b60006020826101808560086107d05a03fa9050806115d15760405162461bcd60e51b8152602060048201526014602482015273189b8c8d4d0b5c185a5c9a5b99cb59985a5b195960621b604482015260640161058e565b5051151598975050505050505050565b6000602082516115f19190611ea9565b156116355760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640161058e565b600060208351611645919061211f565b9050611652816002612217565b85106116985760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b604482015260640161058e565b60008660205b85518111611738578581015192506116b7600289611ea9565b6116ec576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150611719565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61172460028961211f565b9750611731602082611fa9565b905061169e565b509094149695505050505050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6000602082840312156117ef57600080fd5b5035919050565b803563ffffffff8116811461137857600080fd5b6000806040838503121561181d57600080fd5b611826836117f6565b9150611834602084016117f6565b90509250929050565b60008083601f84011261184f57600080fd5b5081356001600160401b0381111561186657600080fd5b60208301915083602082850101111561187e57600080fd5b9250929050565b6000806020838503121561189857600080fd5b82356001600160401b038111156118ae57600080fd5b6118ba8582860161183d565b90969095509350505050565b6000604082840312156118d857600080fd5b50919050565b6000608082840312156118d857600080fd5b60008060008060e0858703121561190657600080fd5b84356001600160401b0381111561191c57600080fd5b6119288782880161183d565b909550935061193c905086602087016118c6565b915061194b86606087016118de565b905092959194509250565b60008083601f84011261196857600080fd5b5081356001600160401b0381111561197f57600080fd5b6020830191508360208260061b850101111561187e57600080fd5b600080600080600060c086880312156119b257600080fd5b85356001600160401b03808211156119c957600080fd5b818801915088601f8301126119dd57600080fd5b8135818111156119ec57600080fd5b8960208260051b8501011115611a0157600080fd5b602092830197509550908701359080821115611a1c57600080fd5b50611a2988828901611956565b9094509250611a3d905087604088016118de565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611a8157611a81611a49565b60405290565b604051608081016001600160401b0381118282101715611a8157611a81611a49565b600060408284031215611abb57600080fd5b611ac3611a5f565b9050813581526020820135602082015292915050565b6000806000806101008587031215611af057600080fd5b611afa8686611aa9565b9350611b0986604087016118de565b939693955050505060c08201359160e0013590565b600080600060408486031215611b3357600080fd5b83356001600160401b03811115611b4957600080fd5b611b558682870161183d565b909790965060209590950135949350505050565b600060208284031215611b7b57600080fd5b610bc9826117f6565b6000806000806000806000610100888a031215611ba057600080fd5b87356001600160401b0380821115611bb757600080fd5b611bc38b838c0161183d565b9099509750879150611bd760208b016117f6565b965060408a0135915080821115611bed57600080fd5b611bf98b838c0161183d565b909650945060608a0135915080821115611c1257600080fd5b508801610120818b031215611c2657600080fd5b9150611c358960808a016118de565b905092959891949750929550565b600080600060608486031215611c5857600080fd5b611c61846117f6565b9250611c6f602085016117f6565b9150611c7d604085016117f6565b90509250925092565b600082601f830112611c9757600080fd5b604051604081018181106001600160401b0382111715611cb957611cb9611a49565b8060405250806040840185811115611cd057600080fd5b845b81811015611cea578035835260209283019201611cd2565b509195945050505050565b600060808284031215611d0757600080fd5b611d0f611a5f565b9050611d1b8383611c86565b8152611d2a8360408401611c86565b602082015292915050565b60008060008060008060008789036101e0811215611d5257600080fd5b60a0811215611d6057600080fd5b50611d69611a87565b611d738a8a611aa9565b8152604089013565ffffffffffff81168114611d8e57600080fd5b6020820152611d9f60608a016117f6565b6040820152611db060808a016117f6565b60608201529650611dc360a089016117f6565b9550611dd28960c08a016118c6565b9450611de2896101008a016118c6565b9350611df2896101408a01611cf5565b92506101c08801356001600160401b03811115611e0e57600080fd5b611e1a8a828b0161183d565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e5757611e57611e2d565b5060010190565b600063ffffffff83811690831681811015611e7b57611e7b611e2d565b039392505050565b8183823760009101908152919050565b634e487b7160e01b600052601260045260246000fd5b600082611eb857611eb8611e93565b500690565b600060408284031215611ecf57600080fd5b610bc98383611aa9565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611f0657600080fd5b8301803591506001600160401b03821115611f2057600080fd5b60200191503681900382131561187e57600080fd5b60008151602080840160005b83811015611f5d57815187529582019590820190600101611f41565b509495945050505050565b6000610bc98284611f35565b6000611f808285611f35565b9283525050602001919050565b600060808284031215611f9f57600080fd5b610bc98383611cf5565b60008219821115611fbc57611fbc611e2d565b500190565b60008085851115611fd157600080fd5b83861115611fde57600080fd5b5050820193919092039150565b8035602083101561029357600019602084900360031b1b1692915050565b60008282101561201b5761201b611e2d565b500390565b600065ffffffffffff80831681851680830382111561204157612041611e2d565b01949350505050565b600065ffffffffffff8083168185168183048111821515161561206f5761206f611e2d565b02949350505050565b600063ffffffff80831681851680830382111561204157612041611e2d565b600063ffffffff808416806120ae576120ae611e93565b92169190910692915050565b600063ffffffff808416806120d1576120d1611e93565b92169190910492915050565b600063ffffffff8083168185168183048111821515161561206f5761206f611e2d565b600081600019048311821515161561211a5761211a611e2d565b500290565b60008261212e5761212e611e93565b500490565b600181815b8085111561216e57816000190482111561215457612154611e2d565b8085161561216157918102915b93841c9390800290612138565b509250929050565b60008261218557506001610293565b8161219257506000610293565b81600181146121a857600281146121b2576121ce565b6001915050610293565b60ff8411156121c3576121c3611e2d565b50506001821b610293565b5060208310610133831016604e8410600b84101617156121f1575081810a610293565b6121fb8383612133565b806000190482111561220f5761220f611e2d565b029392505050565b6000610bc9838361217656fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220b1c40a3d7162306d395bbdb6cc1c68038142e7d925d0e7179d4ab1a3ba1a6cd764736f6c63430008090033";

type DataLayrDisclosureLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataLayrDisclosureLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataLayrDisclosureLogic__factory extends ContractFactory {
  constructor(...args: DataLayrDisclosureLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataLayrDisclosureLogic> {
    return super.deploy(overrides || {}) as Promise<DataLayrDisclosureLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DataLayrDisclosureLogic {
    return super.attach(address) as DataLayrDisclosureLogic;
  }
  override connect(signer: Signer): DataLayrDisclosureLogic__factory {
    return super.connect(signer) as DataLayrDisclosureLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataLayrDisclosureLogicInterface {
    return new utils.Interface(_abi) as DataLayrDisclosureLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataLayrDisclosureLogic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DataLayrDisclosureLogic;
  }
}
