{
  "address": "0x36fCf02Fc651c0b7ef2ECA446Dd2405364F85337",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_groupKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "activeTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssActiveMemberAppended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_inActiveTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssGroupMemberAppend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTssGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupMembers",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupUnJailMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssInactiveGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getTssMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "enum ITssGroupManager.MemberStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITssGroupManager.TssMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inActiveIsEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "byteListA",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "byteListB",
          "type": "bytes"
        }
      ],
      "name": "isEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isInActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistInActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberUnJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publicKeyToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_groupPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setGroupPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_batchPublicKey",
          "type": "bytes[]"
        }
      ],
      "name": "setTssGroupMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSlash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tssActiveMemberInfo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "enum ITssGroupManager.MemberStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "verifySign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17c01b37f6bc39121465de7e3e0484c0d54447b85ca7d020a1df3e07fdeafb5e",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x36fCf02Fc651c0b7ef2ECA446Dd2405364F85337",
    "transactionIndex": 0,
    "gasUsed": "2391248",
    "logsBloom": "0x
    "blockHash": "0xaadb9857c60f5e402f49d36fc4abadf6d1a14bf33abee82f0724e59fff91e555",
    "transactionHash": "0x17c01b37f6bc39121465de7e3e0484c0d54447b85ca7d020a1df3e07fdeafb5e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15,
        "transactionHash": "0x17c01b37f6bc39121465de7e3e0484c0d54447b85ca7d020a1df3e07fdeafb5e",
        "address": "0x36fCf02Fc651c0b7ef2ECA446Dd2405364F85337",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xaadb9857c60f5e402f49d36fc4abadf6d1a14bf33abee82f0724e59fff91e555"
      }
    ],
    "blockNumber": 15,
    "cumulativeGasUsed": "2391248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff0676c2feaea8fe7306288cc12f8b4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_groupKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"activeTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssActiveMemberAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_inActiveTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssGroupMemberAppend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTssGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupMembers\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupUnJailMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssInactiveGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getTssMember\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ITssGroupManager.TssMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inActiveIsEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isInActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistInActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberUnJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publicKeyToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_groupPublicKey\",\"type\":\"bytes\"}],\"name\":\"setGroupPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_batchPublicKey\",\"type\":\"bytes[]\"}],\"name\":\"setTssGroupMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSlash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tssActiveMemberInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"verifySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/tss/TssGroupManager.sol\":\"TssGroupManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/L1/tss/ITssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface ITssGroupManager {\\n    enum MemberStatus {\\n        unJail,\\n        jail\\n    }\\n\\n    struct TssMember {\\n        bytes         publicKey;\\n        address       nodeAddress;\\n        MemberStatus  status;\\n    }\\n\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey) external;\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey) external;\\n    function getTssGroupInfo() external returns (uint256, uint256, bytes memory, bytes[] memory);\\n    function getTssInactiveGroupInfo() external returns (uint256, uint256, bytes[] memory);\\n    function memberJail(bytes memory _publicKey) external;\\n    function memberUnJail(bytes memory _publicKey) external;\\n    function removeMember(bytes memory _publicKey) external;\\n    function getTssGroupUnJailMembers() external returns (address[] memory);\\n    function getTssGroupMembers() external returns (bytes[] memory);\\n    function getTssMember(bytes memory _publicKey) external returns (TssMember memory);\\n    function memberExistActive(bytes memory _publicKey) external returns (bool);\\n    function memberExistInActive(bytes memory _publicKey) external returns (bool);\\n    function inActiveIsEmpty() external returns (bool);\\n    function verifySign(bytes32 _message, bytes memory _sig) external returns (bool);\\n    function publicKeyToAddress (bytes memory publicKey) external returns (address);\\n}\\n\",\"keccak256\":\"0x6bbaf76169b849c95d73940ab1a90742b1dbc611387971625d9d1914589f1c00\",\"license\":\"MIT\"},\"contracts/L1/tss/TssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./ITssGroupManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract TssGroupManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ITssGroupManager\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using ECDSAUpgradeable for bytes32;\\n    using AddressUpgradeable for address;\\n    bytes confirmGroupPublicKey;\\n    address confirmGroupAddress;\\n    uint256 threshold;\\n    uint256 gRoundId;\\n    uint256 confirmNumber;\\n    address public stakingSlash;\\n\\n    bytes[] activeTssMembers; // active tss member group\\n    bytes[] inActiveTssMembers; // inactive tss member group\\n    mapping(bytes => TssMember) public tssActiveMemberInfo; // Tss member publicKey => tssMember\\n    mapping(bytes => bytes) private memberGroupKey; // user publicKey => Cpk\\n    mapping(bytes => uint256) private groupKeyCounter; // Cpk counter\\n    mapping(bytes => bool) private isSubmitGroupKey; // submit group key or not\\n    mapping(bytes => bool) public isInActiveMember; // tss member exist or not\\n\\n    event tssGroupMemberAppend(uint256 _roundId, uint256 _threshold, bytes[] _inActiveTssMembers);\\n\\n    event tssActiveMemberAppended(uint256 _roundId, bytes _groupKey, bytes[] activeTssMembers);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        gRoundId = 0;\\n        confirmNumber = 0;\\n        threshold = 0;\\n    }\\n\\n    modifier onlyStakingSlash() {\\n        require(msg.sender == stakingSlash, \\\"contract call is not staking slashing\\\");\\n        _;\\n    }\\n\\n    function setStakingSlash(address _address) public onlyOwner {\\n        stakingSlash = _address;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require((_batchPublicKey.length > 0), \\\"batch public key is empty\\\");\\n        require(_threshold < _batchPublicKey.length, \\\"threshold must less than tss member\\\");\\n        // require((inActiveTssMembers.length == 0), \\\"inactive tss member array is not empty\\\");\\n        if(inActiveTssMembers.length > 0) {\\n            for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n                // re-election clear data\\n                delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n                delete memberGroupKey[inActiveTssMembers[i]];\\n                delete isSubmitGroupKey[inActiveTssMembers[i]];\\n                delete isInActiveMember[inActiveTssMembers[i]];\\n            }\\n            delete inActiveTssMembers;\\n        }\\n        for (uint256 i = 0; i < _batchPublicKey.length; i++) {\\n            inActiveTssMembers.push(_batchPublicKey[i]);\\n            isInActiveMember[_batchPublicKey[i]] = true;\\n            isSubmitGroupKey[_batchPublicKey[i]] = false;\\n        }\\n        threshold = _threshold;\\n        gRoundId = gRoundId + 1;\\n        confirmNumber = 0;\\n        emit tssGroupMemberAppend(gRoundId, _threshold, _batchPublicKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey)\\n        public\\n        override\\n    {\\n        require(isInActiveMember[_publicKey] == true, \\\"your public key is not in InActiveMember\\\");\\n        require(msg.sender == publicKeyToAddress(_publicKey), \\\"public key not match\\\");\\n\\n        if (isSubmitGroupKey[_publicKey] == false) {\\n            isSubmitGroupKey[_publicKey] = true;\\n            confirmNumber = confirmNumber + 1;\\n        }\\n        if (!isEqual(memberGroupKey[_publicKey], _groupPublicKey)) {\\n            groupKeyCounter[_groupPublicKey] += 1;\\n            if (memberGroupKey[_publicKey].length != 0) {\\n                groupKeyCounter[memberGroupKey[_publicKey]] -= 1;\\n            }\\n            memberGroupKey[_publicKey] = _groupPublicKey;\\n        }\\n        if (groupKeyCounter[_groupPublicKey] == inActiveTssMembers.length) {\\n            updateTssMember(_groupPublicKey);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupInfo()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory,\\n            bytes[] memory\\n        )\\n    {\\n        if (inActiveTssMembers.length > 0) {\\n            return (gRoundId - 1, threshold, confirmGroupPublicKey, activeTssMembers);\\n        }\\n        return (gRoundId, threshold, confirmGroupPublicKey, activeTssMembers);\\n    }\\n\\n    /**\\n    * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssInactiveGroupInfo() public view override returns (uint256, uint256,  bytes[] memory){\\n        return (gRoundId, threshold, inActiveTssMembers);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberJail(bytes memory _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.jail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberUnJail(bytes memory _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.unJail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function removeMember(bytes memory _publicKey) public override onlyStakingSlash {\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (isEqual(activeTssMembers[i], _publicKey)) {\\n                removeActiveTssMembers(i);\\n            }\\n        }\\n        delete tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupUnJailMembers() public view override returns (address[] memory) {\\n        uint256 expectedLength;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                expectedLength++;\\n            }\\n        }\\n        address[] memory _addresses = new address[](expectedLength);\\n        uint256 index;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                _addresses[index] = tssActiveMemberInfo[activeTssMembers[i]].nodeAddress;\\n                index++;\\n            }\\n        }\\n        return _addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupMembers() public view override returns (bytes[] memory) {\\n        return activeTssMembers;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssMember(bytes memory _publicKey) public view override returns (TssMember memory) {\\n        return tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistActive(bytes memory _publicKey) public view override returns (bool) {\\n        if (tssActiveMemberInfo[_publicKey].publicKey.length > 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistInActive(bytes memory _publicKey) public view override returns (bool) {\\n        return isInActiveMember[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function inActiveIsEmpty() public view override returns (bool) {\\n        return inActiveTssMembers.length == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function verifySign(bytes32 _message, bytes memory _sig) public view override returns (bool) {\\n        return (recover(_message, _sig) == confirmGroupAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function publicKeyToAddress(bytes memory publicKey) public pure override returns (address) {\\n        require(publicKey.length == 64, \\\"public key length must 64 bytes\\\");\\n        return address(uint160(uint256(keccak256(publicKey))));\\n    }\\n\\n    function updateTssMember(bytes memory _groupPublicKey) private {\\n        if (activeTssMembers.length > 0) {\\n            for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n                delete tssActiveMemberInfo[activeTssMembers[i]];    // delete tss active member map\\n            }\\n            delete activeTssMembers;  // delete active members\\n        }\\n        for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n            activeTssMembers.push(inActiveTssMembers[i]);\\n            tssActiveMemberInfo[inActiveTssMembers[i]] = TssMember({\\n                publicKey: inActiveTssMembers[i],\\n                nodeAddress: publicKeyToAddress(inActiveTssMembers[i]),\\n                status: MemberStatus.unJail\\n            });\\n            // election finish clear InActiveMember data\\n            delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n            delete memberGroupKey[inActiveTssMembers[i]];\\n            delete isSubmitGroupKey[inActiveTssMembers[i]];\\n            delete isInActiveMember[inActiveTssMembers[i]];\\n        }\\n        delete inActiveTssMembers;\\n        confirmGroupPublicKey = _groupPublicKey;\\n        confirmGroupAddress = publicKeyToAddress(_groupPublicKey);\\n        emit tssActiveMemberAppended(gRoundId, _groupPublicKey, activeTssMembers);\\n    }\\n\\n    function recover(bytes32 _ethSignedMessageHash, bytes memory _sig)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = _split(_sig);\\n        address signer = ecrecover(_ethSignedMessageHash, v, r, s);\\n        require(signer != address(0), \\\"ecrecover failed\\\");\\n        return signer;\\n    }\\n\\n    function _split(bytes memory _sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(_sig.length == 65, \\\"invalid signature length\\\");\\n        assembly {\\n            r := mload(add(_sig, 32))\\n            s := mload(add(_sig, 64))\\n            v := byte(0, mload(add(_sig, 96)))\\n        }\\n        if (v < 27) v += 27;\\n    }\\n\\n    function isEqual(bytes memory byteListA, bytes memory byteListB) public pure returns (bool) {\\n        if (byteListA.length != byteListB.length) return false;\\n        for (uint256 i = 0; i < byteListA.length; i++) {\\n            if (byteListA[i] != byteListB[i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    function removeActiveTssMembers(uint256 _index) private {\\n        require(_index < activeTssMembers.length, \\\"index out of bound\\\");\\n        for (uint256 i = _index; i < activeTssMembers.length - 1; i++) {\\n            activeTssMembers[i] = activeTssMembers[i + 1];\\n        }\\n        activeTssMembers.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xad54b0ca31dc98687c47210d22b6923ae4702f5b9055ba6e26a3761d7bf2c112\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6129d080620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063b3bd9ac411610097578063e46a636811610071578063e46a636814610338578063f2fde38b14610366578063fcca559214610379578063fd3eb81f1461039157600080fd5b8063b3bd9ac4146102f0578063bcbc5fc614610312578063cf4c8a7b1461032557600080fd5b8063715018a61461029e5780637a952c11146102a65780638129fc1c146102b95780638a51d8b4146102c15780638da5cb5b146102ca57806395f645bc146102db57600080fd5b8063404a698611610130578063404a69861461021b578063429ec49c1461023257806343ae656c146102455780634679b366146102585780634866e2e01461026b57806354bbb9141461027e57600080fd5b806319045a25146101785780631a47931b146101a8578063254ff981146101bd5780632cd00d53146101d05780633231a7f0146101e55780633435980814610208575b600080fd5b61018b6101863660046122a9565b6103a4565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bb6101b63660046122f0565b610480565b005b6101bb6101cb3660046123bf565b6107ec565b6101d8610862565b60405161019f91906123fc565b6101f86101f33660046122a9565b610a50565b604051901515815260200161019f565b6101f8610216366004612449565b610a7a565b610223610b0c565b60405161019f93929190612554565b6101bb6102403660046123bf565b610bf7565b61018b6102533660046123bf565b610c33565b6101bb610266366004612449565b610c92565b6101f86102793660046123bf565b610fb4565b61029161028c3660046123bf565b610fdf565b60405161019f91906125b4565b6101bb611109565b6101bb6102b43660046123bf565b61111d565b6101bb611264565b609e54156101f8565b6033546001600160a01b031661018b565b6102e3611385565b60405161019f91906125fe565b6103036102fe3660046123bf565b61145e565b60405161019f93929190612618565b6101f86103203660046123bf565b611523565b609c5461018b906001600160a01b031681565b6101f86103463660046123bf565b805160208183018101805160a38252928201919093012091525460ff1681565b6101bb610374366004612649565b611568565b6103816115de565b60405161019f9493929190612672565b6101bb61039f366004612649565b6118ea565b6000806000806103b385611914565b9250925092506000600187838686604051600081526020016040526040516103f7949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610419573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104745760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b60448201526064015b60405180910390fd5b93505050505b92915050565b61048861199d565b60008151116104d95760405162461bcd60e51b815260206004820152601960248201527f6261746368207075626c6963206b657920697320656d70747900000000000000604482015260640161046b565b805182106105355760405162461bcd60e51b815260206004820152602360248201527f7468726573686f6c64206d757374206c657373207468616e20747373206d656d6044820152623132b960e91b606482015260840161046b565b609e54156106905760005b609e548110156106835760a160a0609e8381548110610561576105616126ae565b9060005260206000200160405161057891906126ff565b908152604051908190036020018120610590916126ff565b90815260200160405180910390206000905560a0609e82815481106105b7576105b76126ae565b906000526020600020016040516105ce91906126ff565b908152602001604051809103902060006105e89190612069565b60a2609e82815481106105fd576105fd6126ae565b9060005260206000200160405161061491906126ff565b908152604051908190036020019020805460ff19169055609e805460a3919083908110610643576106436126ae565b9060005260206000200160405161065a91906126ff565b908152604051908190036020019020805460ff191690558061067b81612787565b915050610540565b50610690609e60006120a3565b60005b815181101561079057609e8282815181106106b0576106b06126ae565b602090810291909101810151825460018101845560009384529282902081516106e294919091019291909101906120c1565b50600160a38383815181106106f9576106f96126ae565b602002602001015160405161070e91906127a2565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600060a2838381518110610749576107496126ae565b602002602001015160405161075e91906127a2565b908152604051908190036020019020805491151560ff199092169190911790558061078881612787565b915050610693565b506099829055609a546107a49060016127be565b609a8190556000609b556040517ffa26843b7ced045dd12994ee0e73c6f0904c3a4608bce58ae304d606035b079e916107e09185908590612554565b60405180910390a15050565b609c546001600160a01b031633146108165760405162461bcd60e51b815260040161046b906127d6565b6001609f8260405161082891906127a2565b908152602001604051809103902060010160146101000a81548160ff0219169083600181111561085a5761085a61257c565b021790555050565b60606000805b609d548110156108f6576000609f609d8381548110610889576108896126ae565b906000526020600020016040516108a091906126ff565b908152602001604051809103902060010160149054906101000a900460ff1660018111156108d0576108d061257c565b14156108e457816108e081612787565b9250505b806108ee81612787565b915050610868565b5060008167ffffffffffffffff811115610912576109126121f2565b60405190808252806020026020018201604052801561093b578160200160208202803683370190505b5090506000805b609d54811015610a47576000609f609d8381548110610963576109636126ae565b9060005260206000200160405161097a91906126ff565b908152602001604051809103902060010160149054906101000a900460ff1660018111156109aa576109aa61257c565b1415610a3557609f609d82815481106109c5576109c56126ae565b906000526020600020016040516109dc91906126ff565b9081526040519081900360200190206001015483516001600160a01b0390911690849084908110610a0f57610a0f6126ae565b6001600160a01b039092166020928302919091019091015281610a3181612787565b9250505b80610a3f81612787565b915050610942565b50909392505050565b6098546000906001600160a01b0316610a6984846103a4565b6001600160a01b0316149392505050565b60008151835114610a8d5750600061047a565b60005b8351811015610b0257828181518110610aab57610aab6126ae565b602001015160f81c60f81b6001600160f81b031916848281518110610ad257610ad26126ae565b01602001516001600160f81b03191614610af057600091505061047a565b80610afa81612787565b915050610a90565b5060019392505050565b6000806060609a54609954609e80805480602002602001604051908101604052809291908181526020016000905b82821015610be6578382906000526020600020018054610b59906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b85906126c4565b8015610bd25780601f10610ba757610100808354040283529160200191610bd2565b820191906000526020600020905b815481529060010190602001808311610bb557829003601f168201915b505050505081526020019060010190610b3a565b505050509050925092509250909192565b609c546001600160a01b03163314610c215760405162461bcd60e51b815260040161046b906127d6565b6000609f8260405161082891906127a2565b60008151604014610c865760405162461bcd60e51b815260206004820152601f60248201527f7075626c6963206b6579206c656e677468206d75737420363420627974657300604482015260640161046b565b50805160209091012090565b60a382604051610ca291906127a2565b9081526040519081900360200190205460ff161515600114610d175760405162461bcd60e51b815260206004820152602860248201527f796f7572207075626c6963206b6579206973206e6f7420696e20496e416374696044820152673b32a6b2b6b132b960c11b606482015260840161046b565b610d2082610c33565b6001600160a01b0316336001600160a01b031614610d775760405162461bcd60e51b81526020600482015260146024820152730e0eac4d8d2c640d6caf240dcdee840dac2e8c6d60631b604482015260640161046b565b60a282604051610d8791906127a2565b9081526040519081900360200190205460ff16610de257600160a283604051610db091906127a2565b908152604051908190036020019020805491151560ff19909216919091179055609b54610dde9060016127be565b609b555b610e9260a083604051610df591906127a2565b90815260200160405180910390208054610e0e906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3a906126c4565b8015610e875780601f10610e5c57610100808354040283529160200191610e87565b820191906000526020600020905b815481529060010190602001808311610e6a57829003601f168201915b505050505082610a7a565b610f7e57600160a182604051610ea891906127a2565b90815260200160405180910390206000828254610ec591906127be565b909155505060405160a090610edb9084906127a2565b90815260200160405180910390208054610ef4906126c4565b159050610f4a57600160a160a084604051610f0f91906127a2565b908152604051908190036020018120610f27916126ff565b90815260200160405180910390206000828254610f44919061281b565b90915550505b8060a083604051610f5b91906127a2565b90815260200160405180910390209080519060200190610f7c9291906120c1565b505b609e5460405160a190610f929084906127a2565b9081526020016040518091039020541415610fb057610fb0816119f7565b5050565b600060a382604051610fc691906127a2565b9081526040519081900360200190205460ff1692915050565b61100060408051606080820183528152600060208201819052909182015290565b609f8260405161101091906127a2565b9081526020016040518091039020604051806060016040529081600082018054611039906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611065906126c4565b80156110b25780601f10611087576101008083540402835291602001916110b2565b820191906000526020600020905b81548152906001019060200180831161109557829003601f168201915b50505091835250506001828101546001600160a01b0381166020840152604090920191600160a01b900460ff16908111156110ef576110ef61257c565b60018111156111005761110061257c565b90525092915050565b61111161199d565b61111b6000611ebe565b565b609c546001600160a01b031633146111475760405162461bcd60e51b815260040161046b906127d6565b60005b609d5481101561122357611203609d828154811061116a5761116a6126ae565b90600052602060002001805461117f906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546111ab906126c4565b80156111f85780601f106111cd576101008083540402835291602001916111f8565b820191906000526020600020905b8154815290600101906020018083116111db57829003601f168201915b505050505083610a7a565b156112115761121181611f10565b8061121b81612787565b91505061114a565b50609f8160405161123491906127a2565b908152604051908190036020019020600061124f8282612069565b5060010180546001600160a81b031916905550565b600054610100900460ff16158080156112845750600054600160ff909116105b8061129e5750303b15801561129e575060005460ff166001145b6113015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046b565b6000805460ff191660011790558015611324576000805461ff0019166101001790555b61132c61200f565b6000609a819055609b8190556099558015611382576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b6060609d805480602002602001604051908101604052809291908181526020016000905b828210156114555783829060005260206000200180546113c8906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546113f4906126c4565b80156114415780601f1061141657610100808354040283529160200191611441565b820191906000526020600020905b81548152906001019060200180831161142457829003601f168201915b5050505050815260200190600101906113a9565b50505050905090565b8051602081830181018051609f82529282019190930120915280548190611484906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546114b0906126c4565b80156114fd5780601f106114d2576101008083540402835291602001916114fd565b820191906000526020600020905b8154815290600101906020018083116114e057829003601f168201915b505050600190930154919250506001600160a01b0381169060ff600160a01b9091041683565b600080609f8360405161153691906127a2565b9081526040519081900360200190208054611550906126c4565b9050111561156057506001919050565b506000919050565b61157061199d565b6001600160a01b0381166115d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046b565b61138281611ebe565b609e546000908190606090819015611772576001609a546115ff919061281b565b6099546097609d818054611612906126c4565b80601f016020809104026020016040519081016040528092919081815260200182805461163e906126c4565b801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b8282101561175f5783829060005260206000200180546116d2906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546116fe906126c4565b801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b5050505050815260200190600101906116b3565b50505050905093509350935093506118e4565b609a546099546097609d818054611788906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546117b4906126c4565b80156118015780601f106117d657610100808354040283529160200191611801565b820191906000526020600020905b8154815290600101906020018083116117e457829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b828210156118d5578382906000526020600020018054611848906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611874906126c4565b80156118c15780601f10611896576101008083540402835291602001916118c1565b820191906000526020600020905b8154815290600101906020018083116118a457829003601f168201915b505050505081526020019060010190611829565b50505050905093509350935093505b90919293565b6118f261199d565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000835160411461196a5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015260640161046b565b50505060208101516040820151606083015160001a601b81101561199657611993601b82612832565b90505b9193909250565b6033546001600160a01b0316331461111b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b609d5415611a845760005b609d54811015611a7757609f609d8281548110611a2157611a216126ae565b90600052602060002001604051611a3891906126ff565b9081526040519081900360200190206000611a538282612069565b5060010180546001600160a81b031916905580611a6f81612787565b915050611a02565b50611a84609d60006120a3565b60005b609e54811015611e3e57609d609e8281548110611aa657611aa66126ae565b600091825260208083208454600181018655948452922091018054919092019190611ad0906126c4565b611adb929190612145565b506040518060600160405280609e8381548110611afa57611afa6126ae565b906000526020600020018054611b0f906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3b906126c4565b8015611b885780601f10611b5d57610100808354040283529160200191611b88565b820191906000526020600020905b815481529060010190602001808311611b6b57829003601f168201915b50505050508152602001611c40609e8481548110611ba857611ba86126ae565b906000526020600020018054611bbd906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611be9906126c4565b8015611c365780601f10611c0b57610100808354040283529160200191611c36565b820191906000526020600020905b815481529060010190602001808311611c1957829003601f168201915b5050505050610c33565b6001600160a01b031681526020016000815250609f609e8381548110611c6857611c686126ae565b90600052602060002001604051611c7f91906126ff565b90815260200160405180910390206000820151816000019080519060200190611ca99291906120c1565b506020820151600180830180546001600160a01b039093166001600160a01b031984168117825560408601519391926001600160a81b03199092161790600160a01b908490811115611cfd57611cfd61257c565b021790555090505060a160a0609e8381548110611d1c57611d1c6126ae565b90600052602060002001604051611d3391906126ff565b908152604051908190036020018120611d4b916126ff565b90815260200160405180910390206000905560a0609e8281548110611d7257611d726126ae565b90600052602060002001604051611d8991906126ff565b90815260200160405180910390206000611da39190612069565b60a2609e8281548110611db857611db86126ae565b90600052602060002001604051611dcf91906126ff565b908152604051908190036020019020805460ff19169055609e805460a3919083908110611dfe57611dfe6126ae565b90600052602060002001604051611e1591906126ff565b908152604051908190036020019020805460ff1916905580611e3681612787565b915050611a87565b50611e4b609e60006120a3565b8051611e5e9060979060208401906120c1565b50611e6881610c33565b609880546001600160a01b0319166001600160a01b0392909216919091179055609a546040517f61c7922e50ad7ea3d35879a4a819ae97eb09b665f2113451d7ada7cb2b689b6691611379918490609d90612857565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609d548110611f565760405162461bcd60e51b81526020600482015260126024820152711a5b99195e081bdd5d081bd988189bdd5b9960721b604482015260640161046b565b805b609d54611f679060019061281b565b811015611fdc57609d611f7b8260016127be565b81548110611f8b57611f8b6126ae565b90600052602060002001609d8281548110611fa857611fa86126ae565b90600052602060002001908054611fbe906126c4565b611fc9929190612145565b5080611fd481612787565b915050611f58565b50609d805480611fee57611fee612939565b60019003818190600052602060002001600061200a9190612069565b905550565b600054610100900460ff166120365760405162461bcd60e51b815260040161046b9061294f565b61111b600054610100900460ff166120605760405162461bcd60e51b815260040161046b9061294f565b61111b33611ebe565b508054612075906126c4565b6000825580601f10612085575050565b601f01602090049060005260206000209081019061138291906121c0565b508054600082559060005260206000209081019061138291906121d5565b8280546120cd906126c4565b90600052602060002090601f0160209004810192826120ef5760008555612135565b82601f1061210857805160ff1916838001178555612135565b82800160010185558215612135579182015b8281111561213557825182559160200191906001019061211a565b506121419291506121c0565b5090565b828054612151906126c4565b90600052602060002090601f0160209004810192826121735760008555612135565b82601f106121845780548555612135565b8280016001018555821561213557600052602060002091601f016020900482015b828111156121355782548255916001019190600101906121a5565b5b8082111561214157600081556001016121c1565b808211156121415760006121e98282612069565b506001016121d5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612231576122316121f2565b604052919050565b600082601f83011261224a57600080fd5b813567ffffffffffffffff811115612264576122646121f2565b612277601f8201601f1916602001612208565b81815284602083860101111561228c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156122bc57600080fd5b82359150602083013567ffffffffffffffff8111156122da57600080fd5b6122e685828601612239565b9150509250929050565b6000806040838503121561230357600080fd5b8235915060208084013567ffffffffffffffff8082111561232357600080fd5b818601915086601f83011261233757600080fd5b813581811115612349576123496121f2565b8060051b612358858201612208565b918252838101850191858101908a84111561237257600080fd5b86860192505b838310156123ae578235858111156123905760008081fd5b61239e8c89838a0101612239565b8352509186019190860190612378565b809750505050505050509250929050565b6000602082840312156123d157600080fd5b813567ffffffffffffffff8111156123e857600080fd5b6123f484828501612239565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561243d5783516001600160a01b031683529284019291840191600101612418565b50909695505050505050565b6000806040838503121561245c57600080fd5b823567ffffffffffffffff8082111561247457600080fd5b61248086838701612239565b9350602085013591508082111561249657600080fd5b506122e685828601612239565b60005b838110156124be5781810151838201526020016124a6565b838111156124cd576000848401525b50505050565b600081518084526124eb8160208601602086016124a3565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156125475782840389526125358483516124d3565b9885019893509084019060010161251d565b5091979650505050505050565b83815282602082015260606040820152600061257360608301846124ff565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b600281106125b057634e487b7160e01b600052602160045260246000fd5b9052565b6020815260008251606060208401526125d060808401826124d3565b905060018060a01b03602085015116604084015260408401516125f66060850182612592565b509392505050565b60208152600061261160208301846124ff565b9392505050565b60608152600061262b60608301866124d3565b6001600160a01b038516602084015290506123f46040830184612592565b60006020828403121561265b57600080fd5b81356001600160a01b038116811461261157600080fd5b84815283602082015260806040820152600061269160808301856124d3565b82810360608401526126a381856124ff565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806126d857607f821691505b602082108114156126f957634e487b7160e01b600052602260045260246000fd5b50919050565b600080835461270d816126c4565b60018281168015612725576001811461273657612765565b60ff19841687528287019450612765565b8760005260208060002060005b8581101561275c5781548a820152908401908201612743565b50505082870194505b50929695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561279b5761279b612771565b5060010190565b600082516127b48184602087016124a3565b9190910192915050565b600082198211156127d1576127d1612771565b500190565b60208082526025908201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c616040820152647368696e6760d81b606082015260800190565b60008282101561282d5761282d612771565b500390565b600060ff821660ff84168060ff0382111561284f5761284f612771565b019392505050565b8381526000602060608184015261287160608401866124d3565b83810360408501528085548083528383019150838160051b8401016000888152858120815b8481101561292857601f198785030186528282546128b3816126c4565b808752600182811680156128ce57600181146128e257612911565b60ff198416898e0152604089019450612911565b8688528c8820885b848110156129095781548f828d01015283820191508e810190506128ea565b8a018e019550505b50988b019892965050509190910190600101612896565b50919b9a5050505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212209ff0cff90cada0e9b43d1dbd255b600e50baf9ea03b608b9d692c453e5ea722c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063b3bd9ac411610097578063e46a636811610071578063e46a636814610338578063f2fde38b14610366578063fcca559214610379578063fd3eb81f1461039157600080fd5b8063b3bd9ac4146102f0578063bcbc5fc614610312578063cf4c8a7b1461032557600080fd5b8063715018a61461029e5780637a952c11146102a65780638129fc1c146102b95780638a51d8b4146102c15780638da5cb5b146102ca57806395f645bc146102db57600080fd5b8063404a698611610130578063404a69861461021b578063429ec49c1461023257806343ae656c146102455780634679b366146102585780634866e2e01461026b57806354bbb9141461027e57600080fd5b806319045a25146101785780631a47931b146101a8578063254ff981146101bd5780632cd00d53146101d05780633231a7f0146101e55780633435980814610208575b600080fd5b61018b6101863660046122a9565b6103a4565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bb6101b63660046122f0565b610480565b005b6101bb6101cb3660046123bf565b6107ec565b6101d8610862565b60405161019f91906123fc565b6101f86101f33660046122a9565b610a50565b604051901515815260200161019f565b6101f8610216366004612449565b610a7a565b610223610b0c565b60405161019f93929190612554565b6101bb6102403660046123bf565b610bf7565b61018b6102533660046123bf565b610c33565b6101bb610266366004612449565b610c92565b6101f86102793660046123bf565b610fb4565b61029161028c3660046123bf565b610fdf565b60405161019f91906125b4565b6101bb611109565b6101bb6102b43660046123bf565b61111d565b6101bb611264565b609e54156101f8565b6033546001600160a01b031661018b565b6102e3611385565b60405161019f91906125fe565b6103036102fe3660046123bf565b61145e565b60405161019f93929190612618565b6101f86103203660046123bf565b611523565b609c5461018b906001600160a01b031681565b6101f86103463660046123bf565b805160208183018101805160a38252928201919093012091525460ff1681565b6101bb610374366004612649565b611568565b6103816115de565b60405161019f9493929190612672565b6101bb61039f366004612649565b6118ea565b6000806000806103b385611914565b9250925092506000600187838686604051600081526020016040526040516103f7949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610419573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104745760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b60448201526064015b60405180910390fd5b93505050505b92915050565b61048861199d565b60008151116104d95760405162461bcd60e51b815260206004820152601960248201527f6261746368207075626c6963206b657920697320656d70747900000000000000604482015260640161046b565b805182106105355760405162461bcd60e51b815260206004820152602360248201527f7468726573686f6c64206d757374206c657373207468616e20747373206d656d6044820152623132b960e91b606482015260840161046b565b609e54156106905760005b609e548110156106835760a160a0609e8381548110610561576105616126ae565b9060005260206000200160405161057891906126ff565b908152604051908190036020018120610590916126ff565b90815260200160405180910390206000905560a0609e82815481106105b7576105b76126ae565b906000526020600020016040516105ce91906126ff565b908152602001604051809103902060006105e89190612069565b60a2609e82815481106105fd576105fd6126ae565b9060005260206000200160405161061491906126ff565b908152604051908190036020019020805460ff19169055609e805460a3919083908110610643576106436126ae565b9060005260206000200160405161065a91906126ff565b908152604051908190036020019020805460ff191690558061067b81612787565b915050610540565b50610690609e60006120a3565b60005b815181101561079057609e8282815181106106b0576106b06126ae565b602090810291909101810151825460018101845560009384529282902081516106e294919091019291909101906120c1565b50600160a38383815181106106f9576106f96126ae565b602002602001015160405161070e91906127a2565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600060a2838381518110610749576107496126ae565b602002602001015160405161075e91906127a2565b908152604051908190036020019020805491151560ff199092169190911790558061078881612787565b915050610693565b506099829055609a546107a49060016127be565b609a8190556000609b556040517ffa26843b7ced045dd12994ee0e73c6f0904c3a4608bce58ae304d606035b079e916107e09185908590612554565b60405180910390a15050565b609c546001600160a01b031633146108165760405162461bcd60e51b815260040161046b906127d6565b6001609f8260405161082891906127a2565b908152602001604051809103902060010160146101000a81548160ff0219169083600181111561085a5761085a61257c565b021790555050565b60606000805b609d548110156108f6576000609f609d8381548110610889576108896126ae565b906000526020600020016040516108a091906126ff565b908152602001604051809103902060010160149054906101000a900460ff1660018111156108d0576108d061257c565b14156108e457816108e081612787565b9250505b806108ee81612787565b915050610868565b5060008167ffffffffffffffff811115610912576109126121f2565b60405190808252806020026020018201604052801561093b578160200160208202803683370190505b5090506000805b609d54811015610a47576000609f609d8381548110610963576109636126ae565b9060005260206000200160405161097a91906126ff565b908152602001604051809103902060010160149054906101000a900460ff1660018111156109aa576109aa61257c565b1415610a3557609f609d82815481106109c5576109c56126ae565b906000526020600020016040516109dc91906126ff565b9081526040519081900360200190206001015483516001600160a01b0390911690849084908110610a0f57610a0f6126ae565b6001600160a01b039092166020928302919091019091015281610a3181612787565b9250505b80610a3f81612787565b915050610942565b50909392505050565b6098546000906001600160a01b0316610a6984846103a4565b6001600160a01b0316149392505050565b60008151835114610a8d5750600061047a565b60005b8351811015610b0257828181518110610aab57610aab6126ae565b602001015160f81c60f81b6001600160f81b031916848281518110610ad257610ad26126ae565b01602001516001600160f81b03191614610af057600091505061047a565b80610afa81612787565b915050610a90565b5060019392505050565b6000806060609a54609954609e80805480602002602001604051908101604052809291908181526020016000905b82821015610be6578382906000526020600020018054610b59906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b85906126c4565b8015610bd25780601f10610ba757610100808354040283529160200191610bd2565b820191906000526020600020905b815481529060010190602001808311610bb557829003601f168201915b505050505081526020019060010190610b3a565b505050509050925092509250909192565b609c546001600160a01b03163314610c215760405162461bcd60e51b815260040161046b906127d6565b6000609f8260405161082891906127a2565b60008151604014610c865760405162461bcd60e51b815260206004820152601f60248201527f7075626c6963206b6579206c656e677468206d75737420363420627974657300604482015260640161046b565b50805160209091012090565b60a382604051610ca291906127a2565b9081526040519081900360200190205460ff161515600114610d175760405162461bcd60e51b815260206004820152602860248201527f796f7572207075626c6963206b6579206973206e6f7420696e20496e416374696044820152673b32a6b2b6b132b960c11b606482015260840161046b565b610d2082610c33565b6001600160a01b0316336001600160a01b031614610d775760405162461bcd60e51b81526020600482015260146024820152730e0eac4d8d2c640d6caf240dcdee840dac2e8c6d60631b604482015260640161046b565b60a282604051610d8791906127a2565b9081526040519081900360200190205460ff16610de257600160a283604051610db091906127a2565b908152604051908190036020019020805491151560ff19909216919091179055609b54610dde9060016127be565b609b555b610e9260a083604051610df591906127a2565b90815260200160405180910390208054610e0e906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3a906126c4565b8015610e875780601f10610e5c57610100808354040283529160200191610e87565b820191906000526020600020905b815481529060010190602001808311610e6a57829003601f168201915b505050505082610a7a565b610f7e57600160a182604051610ea891906127a2565b90815260200160405180910390206000828254610ec591906127be565b909155505060405160a090610edb9084906127a2565b90815260200160405180910390208054610ef4906126c4565b159050610f4a57600160a160a084604051610f0f91906127a2565b908152604051908190036020018120610f27916126ff565b90815260200160405180910390206000828254610f44919061281b565b90915550505b8060a083604051610f5b91906127a2565b90815260200160405180910390209080519060200190610f7c9291906120c1565b505b609e5460405160a190610f929084906127a2565b9081526020016040518091039020541415610fb057610fb0816119f7565b5050565b600060a382604051610fc691906127a2565b9081526040519081900360200190205460ff1692915050565b61100060408051606080820183528152600060208201819052909182015290565b609f8260405161101091906127a2565b9081526020016040518091039020604051806060016040529081600082018054611039906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611065906126c4565b80156110b25780601f10611087576101008083540402835291602001916110b2565b820191906000526020600020905b81548152906001019060200180831161109557829003601f168201915b50505091835250506001828101546001600160a01b0381166020840152604090920191600160a01b900460ff16908111156110ef576110ef61257c565b60018111156111005761110061257c565b90525092915050565b61111161199d565b61111b6000611ebe565b565b609c546001600160a01b031633146111475760405162461bcd60e51b815260040161046b906127d6565b60005b609d5481101561122357611203609d828154811061116a5761116a6126ae565b90600052602060002001805461117f906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546111ab906126c4565b80156111f85780601f106111cd576101008083540402835291602001916111f8565b820191906000526020600020905b8154815290600101906020018083116111db57829003601f168201915b505050505083610a7a565b156112115761121181611f10565b8061121b81612787565b91505061114a565b50609f8160405161123491906127a2565b908152604051908190036020019020600061124f8282612069565b5060010180546001600160a81b031916905550565b600054610100900460ff16158080156112845750600054600160ff909116105b8061129e5750303b15801561129e575060005460ff166001145b6113015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046b565b6000805460ff191660011790558015611324576000805461ff0019166101001790555b61132c61200f565b6000609a819055609b8190556099558015611382576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b6060609d805480602002602001604051908101604052809291908181526020016000905b828210156114555783829060005260206000200180546113c8906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546113f4906126c4565b80156114415780601f1061141657610100808354040283529160200191611441565b820191906000526020600020905b81548152906001019060200180831161142457829003601f168201915b5050505050815260200190600101906113a9565b50505050905090565b8051602081830181018051609f82529282019190930120915280548190611484906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546114b0906126c4565b80156114fd5780601f106114d2576101008083540402835291602001916114fd565b820191906000526020600020905b8154815290600101906020018083116114e057829003601f168201915b505050600190930154919250506001600160a01b0381169060ff600160a01b9091041683565b600080609f8360405161153691906127a2565b9081526040519081900360200190208054611550906126c4565b9050111561156057506001919050565b506000919050565b61157061199d565b6001600160a01b0381166115d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046b565b61138281611ebe565b609e546000908190606090819015611772576001609a546115ff919061281b565b6099546097609d818054611612906126c4565b80601f016020809104026020016040519081016040528092919081815260200182805461163e906126c4565b801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b8282101561175f5783829060005260206000200180546116d2906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546116fe906126c4565b801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b5050505050815260200190600101906116b3565b50505050905093509350935093506118e4565b609a546099546097609d818054611788906126c4565b80601f01602080910402602001604051908101604052809291908181526020018280546117b4906126c4565b80156118015780601f106117d657610100808354040283529160200191611801565b820191906000526020600020905b8154815290600101906020018083116117e457829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b828210156118d5578382906000526020600020018054611848906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611874906126c4565b80156118c15780601f10611896576101008083540402835291602001916118c1565b820191906000526020600020905b8154815290600101906020018083116118a457829003601f168201915b505050505081526020019060010190611829565b50505050905093509350935093505b90919293565b6118f261199d565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000835160411461196a5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015260640161046b565b50505060208101516040820151606083015160001a601b81101561199657611993601b82612832565b90505b9193909250565b6033546001600160a01b0316331461111b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b609d5415611a845760005b609d54811015611a7757609f609d8281548110611a2157611a216126ae565b90600052602060002001604051611a3891906126ff565b9081526040519081900360200190206000611a538282612069565b5060010180546001600160a81b031916905580611a6f81612787565b915050611a02565b50611a84609d60006120a3565b60005b609e54811015611e3e57609d609e8281548110611aa657611aa66126ae565b600091825260208083208454600181018655948452922091018054919092019190611ad0906126c4565b611adb929190612145565b506040518060600160405280609e8381548110611afa57611afa6126ae565b906000526020600020018054611b0f906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3b906126c4565b8015611b885780601f10611b5d57610100808354040283529160200191611b88565b820191906000526020600020905b815481529060010190602001808311611b6b57829003601f168201915b50505050508152602001611c40609e8481548110611ba857611ba86126ae565b906000526020600020018054611bbd906126c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611be9906126c4565b8015611c365780601f10611c0b57610100808354040283529160200191611c36565b820191906000526020600020905b815481529060010190602001808311611c1957829003601f168201915b5050505050610c33565b6001600160a01b031681526020016000815250609f609e8381548110611c6857611c686126ae565b90600052602060002001604051611c7f91906126ff565b90815260200160405180910390206000820151816000019080519060200190611ca99291906120c1565b506020820151600180830180546001600160a01b039093166001600160a01b031984168117825560408601519391926001600160a81b03199092161790600160a01b908490811115611cfd57611cfd61257c565b021790555090505060a160a0609e8381548110611d1c57611d1c6126ae565b90600052602060002001604051611d3391906126ff565b908152604051908190036020018120611d4b916126ff565b90815260200160405180910390206000905560a0609e8281548110611d7257611d726126ae565b90600052602060002001604051611d8991906126ff565b90815260200160405180910390206000611da39190612069565b60a2609e8281548110611db857611db86126ae565b90600052602060002001604051611dcf91906126ff565b908152604051908190036020019020805460ff19169055609e805460a3919083908110611dfe57611dfe6126ae565b90600052602060002001604051611e1591906126ff565b908152604051908190036020019020805460ff1916905580611e3681612787565b915050611a87565b50611e4b609e60006120a3565b8051611e5e9060979060208401906120c1565b50611e6881610c33565b609880546001600160a01b0319166001600160a01b0392909216919091179055609a546040517f61c7922e50ad7ea3d35879a4a819ae97eb09b665f2113451d7ada7cb2b689b6691611379918490609d90612857565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609d548110611f565760405162461bcd60e51b81526020600482015260126024820152711a5b99195e081bdd5d081bd988189bdd5b9960721b604482015260640161046b565b805b609d54611f679060019061281b565b811015611fdc57609d611f7b8260016127be565b81548110611f8b57611f8b6126ae565b90600052602060002001609d8281548110611fa857611fa86126ae565b90600052602060002001908054611fbe906126c4565b611fc9929190612145565b5080611fd481612787565b915050611f58565b50609d805480611fee57611fee612939565b60019003818190600052602060002001600061200a9190612069565b905550565b600054610100900460ff166120365760405162461bcd60e51b815260040161046b9061294f565b61111b600054610100900460ff166120605760405162461bcd60e51b815260040161046b9061294f565b61111b33611ebe565b508054612075906126c4565b6000825580601f10612085575050565b601f01602090049060005260206000209081019061138291906121c0565b508054600082559060005260206000209081019061138291906121d5565b8280546120cd906126c4565b90600052602060002090601f0160209004810192826120ef5760008555612135565b82601f1061210857805160ff1916838001178555612135565b82800160010185558215612135579182015b8281111561213557825182559160200191906001019061211a565b506121419291506121c0565b5090565b828054612151906126c4565b90600052602060002090601f0160209004810192826121735760008555612135565b82601f106121845780548555612135565b8280016001018555821561213557600052602060002091601f016020900482015b828111156121355782548255916001019190600101906121a5565b5b8082111561214157600081556001016121c1565b808211156121415760006121e98282612069565b506001016121d5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612231576122316121f2565b604052919050565b600082601f83011261224a57600080fd5b813567ffffffffffffffff811115612264576122646121f2565b612277601f8201601f1916602001612208565b81815284602083860101111561228c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156122bc57600080fd5b82359150602083013567ffffffffffffffff8111156122da57600080fd5b6122e685828601612239565b9150509250929050565b6000806040838503121561230357600080fd5b8235915060208084013567ffffffffffffffff8082111561232357600080fd5b818601915086601f83011261233757600080fd5b813581811115612349576123496121f2565b8060051b612358858201612208565b918252838101850191858101908a84111561237257600080fd5b86860192505b838310156123ae578235858111156123905760008081fd5b61239e8c89838a0101612239565b8352509186019190860190612378565b809750505050505050509250929050565b6000602082840312156123d157600080fd5b813567ffffffffffffffff8111156123e857600080fd5b6123f484828501612239565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561243d5783516001600160a01b031683529284019291840191600101612418565b50909695505050505050565b6000806040838503121561245c57600080fd5b823567ffffffffffffffff8082111561247457600080fd5b61248086838701612239565b9350602085013591508082111561249657600080fd5b506122e685828601612239565b60005b838110156124be5781810151838201526020016124a6565b838111156124cd576000848401525b50505050565b600081518084526124eb8160208601602086016124a3565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156125475782840389526125358483516124d3565b9885019893509084019060010161251d565b5091979650505050505050565b83815282602082015260606040820152600061257360608301846124ff565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b600281106125b057634e487b7160e01b600052602160045260246000fd5b9052565b6020815260008251606060208401526125d060808401826124d3565b905060018060a01b03602085015116604084015260408401516125f66060850182612592565b509392505050565b60208152600061261160208301846124ff565b9392505050565b60608152600061262b60608301866124d3565b6001600160a01b038516602084015290506123f46040830184612592565b60006020828403121561265b57600080fd5b81356001600160a01b038116811461261157600080fd5b84815283602082015260806040820152600061269160808301856124d3565b82810360608401526126a381856124ff565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806126d857607f821691505b602082108114156126f957634e487b7160e01b600052602260045260246000fd5b50919050565b600080835461270d816126c4565b60018281168015612725576001811461273657612765565b60ff19841687528287019450612765565b8760005260208060002060005b8581101561275c5781548a820152908401908201612743565b50505082870194505b50929695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561279b5761279b612771565b5060010190565b600082516127b48184602087016124a3565b9190910192915050565b600082198211156127d1576127d1612771565b500190565b60208082526025908201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c616040820152647368696e6760d81b606082015260800190565b60008282101561282d5761282d612771565b500390565b600060ff821660ff84168060ff0382111561284f5761284f612771565b019392505050565b8381526000602060608184015261287160608401866124d3565b83810360408501528085548083528383019150838160051b8401016000888152858120815b8481101561292857601f198785030186528282546128b3816126c4565b808752600182811680156128ce57600181146128e257612911565b60ff198416898e0152604089019450612911565b8688528c8820885b848110156129095781548f828d01015283820191508e810190506128ea565b8a018e019550505b50988b019892965050509190910190600101612896565b50919b9a5050505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212209ff0cff90cada0e9b43d1dbd255b600e50baf9ea03b608b9d692c453e5ea722c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 219,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2492,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 501,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 35587,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupPublicKey",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes_storage"
      },
      {
        "astId": 35589,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 35591,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "threshold",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 35593,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "gRoundId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 35595,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmNumber",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 35597,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "stakingSlash",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 35600,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "activeTssMembers",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 35603,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "inActiveTssMembers",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 35608,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "tssActiveMemberInfo",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)35346_storage)"
      },
      {
        "astId": 35612,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "memberGroupKey",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes_storage)"
      },
      {
        "astId": 35616,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "groupKeyCounter",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 35620,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isSubmitGroupKey",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 35624,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isInActiveMember",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(MemberStatus)35338": {
        "encoding": "inplace",
        "label": "enum ITssGroupManager.MemberStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)35346_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct ITssGroupManager.TssMember)",
        "numberOfBytes": "32",
        "value": "t_struct(TssMember)35346_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TssMember)35346_storage": {
        "encoding": "inplace",
        "label": "struct ITssGroupManager.TssMember",
        "members": [
          {
            "astId": 35340,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "publicKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 35342,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 35345,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(MemberStatus)35338"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}